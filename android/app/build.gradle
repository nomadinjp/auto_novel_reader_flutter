plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode") ?: "1"
def flutterVersionName = localProperties.getProperty("flutter.versionName") ?: "1.0"

android {
    namespace = "com.prixii.auto_novel_reader_flutter"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"  // 确保 Kotlin 使用 Java 17
    }

    defaultConfig {
        applicationId = "com.prixii.auto_novel_reader_flutter"
        minSdkVersion = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    signingConfigs {
        release {
            // 延迟加载，只在执行 release 构建任务时读取 key.properties
            def releaseConfig = this
            afterEvaluate {
                if (gradle.startParameter.taskNames.any { it.toLowerCase().contains("release") }) {
                    def keystorePropertiesFile = rootProject.file("key.properties")
                    if (keystorePropertiesFile.exists()) {
                        def keystoreProperties = new Properties()
                        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                        releaseConfig.keyAlias = keystoreProperties['keyAlias']
                        releaseConfig.keyPassword = keystoreProperties['keyPassword']
                        releaseConfig.storeFile = file(keystoreProperties['storeFile'])
                        releaseConfig.storePassword = keystoreProperties['storePassword']
                    } else {
                        println("Warning: key.properties not found, release build will fail if signing is required.")
                    }
                }
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}
